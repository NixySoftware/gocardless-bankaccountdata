/*
 * GoCardless Bank Account Data API
 *
 * Securely access your user's bank account information for better lending, accounting, verification and financial management.
 *
 * The version of the OpenAPI document: 2.0.6
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReconfirmationRetrieve : EUA reconfirmation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReconfirmationRetrieve {
    /// Reconfirmation URL to be provided to PSU.
    #[serde(rename = "reconfirmation_url", skip_serializing_if = "Option::is_none")]
    pub reconfirmation_url: Option<String>,
    /// Reconfirmation creation time
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// Datetime from when PSU will be able to access reconfirmation URL.
    #[serde(rename = "url_valid_from", skip_serializing_if = "Option::is_none")]
    pub url_valid_from: Option<String>,
    /// Datetime until when PSU will be able to access reconfirmation URL.
    #[serde(rename = "url_valid_to", skip_serializing_if = "Option::is_none")]
    pub url_valid_to: Option<String>,
    /// Optional redirect URL for reconfirmation to override requisition's redirect.
    #[serde(
        rename = "redirect",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub redirect: Option<Option<String>>,
    /// Last time when reconfirmation was accessed (this does not mean that it was accessed by PSU).
    #[serde(
        rename = "last_accessed",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_accessed: Option<Option<String>>,
    /// Last time reconfirmation was submitted (it can be submitted multiple times).
    #[serde(
        rename = "last_submitted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_submitted: Option<Option<String>>,
    /// Dictionary of accounts and their reconfirm and reject timestamps
    #[serde(rename = "accounts", skip_serializing_if = "Option::is_none")]
    pub accounts: Option<serde_json::Value>,
}

impl ReconfirmationRetrieve {
    /// EUA reconfirmation.
    pub fn new() -> ReconfirmationRetrieve {
        ReconfirmationRetrieve {
            reconfirmation_url: None,
            created: None,
            url_valid_from: None,
            url_valid_to: None,
            redirect: None,
            last_accessed: None,
            last_submitted: None,
            accounts: None,
        }
    }
}
